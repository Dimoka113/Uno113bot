#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Telegram bot to play UNO in group chats
# Copyright (c) 2016 Jannes H√∂ke <uno@jhoeke.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


"""Defines helper functions to build the inline result list"""

import numbers
from uuid import uuid4

from telegram import InlineQueryResultArticle, InputTextMessageContent, \
    InlineQueryResultCachedSticker as Sticker
import card_dark as cb
import card as c
from utils import display_color, display_color_group, display_name, display_color_dark, display_color_group_dark
from internationalization import _, __


def add_choose_color(results, game):
    """Add choose color options"""
    for color in c.COLORS:
        results.append(
            InlineQueryResultArticle(
                id=color,
                title=_("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç"),
                description=display_color(color),
                input_message_content=InputTextMessageContent(
                    display_color_group(color, game))
            )
        )


def add_choose_color_black(results, game):
    """Add choose color options"""
    for color in cb.COLORS:
        results.append(
            InlineQueryResultArticle(
                id=color,
                title=_("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç"),
                description=display_color_dark(color),
                input_message_content=InputTextMessageContent(
                    display_color_group_dark(color, game))
            )
        )


def add_other_cards(player, results, game):
    """Add hand cards when choosing colors"""
    player.cards.sort()
    results.append(
        InlineQueryResultArticle(
            "hand",
            title=_("–ö–∞—Ä—Ç–∞ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã):",
                    "–ö–∞—Ä—Ç—ã (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã):",
                    len(player.cards)),
            description=', '.join([repr(card) for card in (player.cards)]),
            input_message_content=game_info(game)
        )
    )


def player_list(game):
    """Generate list of player strings"""
    return [_("{number}üÉè  {name}",
              "{number}üÉè  {name}",
              len(player.cards))
            .format(name=player.user.first_name, number=len(player.cards))
            for player in game.players]


def lose_game(results):
    """Add text result if user is losed in game"""
    results.append(
        InlineQueryResultArticle(
            "nogame",
            title=_("–£–≤—ã, –Ω–æ –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"),
            input_message_content=InputTextMessageContent(_('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new —á—Ç–æ–±—ã '
                                                            '–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ /join, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ '
                                                            '—Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ'))
        )
    )


def add_no_game(results):
    """Add text result if user is not playing"""
    results.append(
        InlineQueryResultArticle(
            "nogame",
            title=_("–í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ!"),
            input_message_content=InputTextMessageContent(_('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new —á—Ç–æ–±—ã '
                                                            '–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ /join, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ '
                                                            '—Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ'))
        )
    )


def add_not_started(results):
    """Add text result if the game has not yet started"""
    results.append(
        InlineQueryResultArticle(
            "nogame",
            title=_("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!"),
            description=("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º!"),
            input_message_content=InputTextMessageContent(
                _('–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–∂–∏–º!'))
        )
    )


def add_mode_classic(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_classic",
            title=_("üéª Classic mode"),
            description=(
                "–ö–∞—Ä—Ç—ã –æ—Ç 0 –¥–æ 9, —Ä–∞–∑–≤–æ—Ä–æ—Ç, —Å–∫–∏–ø, +2, +4, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞"),
            input_message_content=InputTextMessageContent(_('–û–±—ã—á–Ω—ã–π üéª'))
        )
    )


def add_mode_fast(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_fast",
            title=_("üöÄ Sanic mode"),
            description=(
                "–û–±—ã—á–Ω–∞—è –∫–æ–ª–æ–¥–∞ –∫–∞—Ä—Ç UNO, –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"),
            input_message_content=InputTextMessageContent(_('–ë—ã—Å—Ç—Ä—ã–π! üöÄ'))
        )
    )


def add_mode_wild(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_wild",
            title=_("üêâ Wild mode"),
            description=(
                "–ö–∞—Ä—Ç—ã –æ—Ç 1 –¥–æ 5, —Ä–∞–∑–≤–æ—Ä–æ—Ç, —Å–∫–∏–ø, +2, +4, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ (–ë–æ–ª—å—à–µ —Å–ø–µ—Ü.–∫–∞—Ä—Ç)"),
            input_message_content=InputTextMessageContent(
                _('–í –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ~ üêâ'))
        )
    )


def add_mode_super_wild(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_super-wild",
            title=_("üî•üêâ SUPER Wild mode"),
            description=(
                "–ö–∞—Ä—Ç–∞ 0, —Ä–∞–∑–≤–æ—Ä–æ—Ç, —Å–∫–∏–ø, +2, +4, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ (–ú–ù–û–ì–û —Å–ø–µ—Ü.–∫–∞—Ä—Ç)"),
            input_message_content=InputTextMessageContent(
                _('–í –æ–ø–∞—Å–Ω–æ–π –¥–∏–∫–æ–π –ø—Ä–∏—Ä–æ–¥–µ~ üî•üêâ'))
        )
    )


def add_mode_big(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_big",
            title=_("üåé BIG WORLD mode"),
            description=(
                "–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç –û–ß–ï–ù–¨ –º–Ω–æ–≥–æ –∫–∞—Ä—Ç"),
            input_message_content=InputTextMessageContent(_('–í –±–æ–ª—å—à–æ–º –º–∏—Ä–µüåé'))
        )
    )


def add_mode_big_wild(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_big",
            title=_("üåé BIG WORLD mode"),
            description=(
                "–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç –û–ß–ï–ù–¨ –º–Ω–æ–≥–æ –∫–∞—Ä—Ç"),
            input_message_content=InputTextMessageContent(_('–í –±–æ–ª—å—à–æ–º –º–∏—Ä–µüåé'))
        )
    )


def add_mode_big_wild(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_big-wild",
            title=_("üåéüêâ BIG WORLD wild TEXT mode"),
            description=(
                "–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç –û–ß–ï–ù–¨ –º–Ω–æ–≥–æ –∫–∞—Ä—Ç –∏ "),
            input_message_content=InputTextMessageContent(
                _('–í –±–æ–ª—å—à–æ–º –¥–∏–∫–æ–º –º–∏—Ä–µüåéüêâ'))
        )
    )

def add_mode_big_wild_text(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_big-wild-text",
            title=_("üåéüêâ‚úçÔ∏è BIG WORLD wild mode"),
            description=(
                "–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç –û–ß–ï–ù–¨ –º–Ω–æ–≥–æ –∫–∞—Ä—Ç (–ë–æ–ª—å—à–µ —Å–ø–µ—Ü.–∫–∞—Ä—Ç)"),
            input_message_content=InputTextMessageContent(
                _('–í –±–æ–ª—å—à–æ–º –¥–∏–∫–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –º–∏—Ä–µüåéüêâ‚úçÔ∏è'))
        )
    )


def add_mode_big_text(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_big-text",
            title=_("üåé‚úçÔ∏è BIG WORLD TEXT mode"),
            description=(
                "–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç –û–ß–ï–ù–¨ –º–Ω–æ–≥–æ –∫–∞—Ä—Ç (–ë–æ–ª—å—à–µ —Å–ø–µ—Ü.–∫–∞—Ä—Ç)"),
            input_message_content=InputTextMessageContent(
                _('–í –±–æ–ª—å—à–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –º–∏—Ä–µüåé‚úçÔ∏è'))
        )
    )


def add_mode_super_wild_text(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_super-wild-text",
            title=_("üî•üêâ‚úçÔ∏è SUPER Wild TEXT mode"),
            description=(
                "–ö–∞—Ä—Ç–∞ 0, —Ä–∞–∑–≤–æ—Ä–æ—Ç, —Å–∫–∏–ø, +2, +4, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ (–ú–ù–û–ì–û —Å–ø–µ—Ü.–∫–∞—Ä—Ç, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"),
            input_message_content=InputTextMessageContent(
                _('–í –æ–ø–∞—Å–Ω–æ–π —Ç–∏—Ö–æ–π —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø—Ä–∏—Ä–æ–¥–µ~ üî•üêâ‚úçÔ∏è'))
        )
    )


def add_mode_num_text(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_number-text",
            title=_("üî¢‚úçÔ∏è NUMBER text mode"),
            description=(
                "–ö–∞—Ä—Ç—ã –æ—Ç 0 –¥–æ 9, –∏–∑ —Å–ø–µ—Ü.–∫–∞—Ä—Ç: +4, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"),
            input_message_content=InputTextMessageContent(
                _('–ß–∏—Å–ª–æ-—Ç–µ–∫—Å—Ç–æ–≤—ã–π üî¢‚úçÔ∏è'))
        )
    )


def add_mode_num(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_number",
            title=_("üî¢ NUMBER mode"),
            description=("–ö–∞—Ä—Ç—ã –æ—Ç 0 –¥–æ 9, –∏–∑ —Å–ø–µ—Ü.–∫–∞—Ä—Ç: +4, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞"),
            input_message_content=InputTextMessageContent(_('–ß–∏—Å–ª–æ–≤–æ–π üî¢'))
        )
    )


def add_mode_text(results):
    """Change mode to text"""
    results.append(
        InlineQueryResultArticle(
            "mode_text",
            title=_("‚úçÔ∏è Text mode"),
            description=(
                "–ö–∞—Ä—Ç—ã –æ—Ç 0 –¥–æ 9, —Ä–∞–∑–≤–æ—Ä–æ—Ç, —Å–∫–∏–ø, +2, +4, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"),
            input_message_content=InputTextMessageContent(_('–¢–µ–∫—Å—Ç ‚úçÔ∏è'))
        )
    )


def add_mode_text_wild(results):
    """Change mode to text"""
    results.append(
        InlineQueryResultArticle(
            "mode_text-wild",
            title=_("üêâ‚úçÔ∏è Text-Wild mode"),
            description=(
                "–ö–∞—Ä—Ç—ã –æ—Ç 1 –¥–æ 5, —Ä–∞–∑–≤–æ—Ä–æ—Ç, —Å–∫–∏–ø, +2, +4, —Å–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ (–ë–æ–ª—å—à–µ —Å–ø–µ—Ü.–∫–∞—Ä—Ç, —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"),
            input_message_content=InputTextMessageContent(_('üêâ‚úçÔ∏è –î–∏–∫–∏–π –¢–µ–∫—Å—Ç'))
        )
    )


def add_mode_inverse_text(results):
    """Change mode to inverse text"""
    results.append(
        InlineQueryResultArticle(
            "mode_inverse-text",
            title=_("üîÅ‚úçÔ∏è INVERSE text mode"),
            description=(
                "–í —ç—Ç–æ–º –∏–≥—Ä–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ú–û–ñ–ù–û –∫–∏–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï–õ–¨–ó–Ø! –ò –ù–ê–û–ë–û–†–û–¢! (–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"),
            input_message_content=InputTextMessageContent(
                _('Inverse-—Ç–µ–∫—Å—Ç–æ–≤—ã–π üîÅ‚úçÔ∏è'))
        )
    )


def add_mode_inverse(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "mode_inverse",
            title=_("üîÅ INVERSE mode"),
            description=(
                "–í —ç—Ç–æ–º –∏–≥—Ä–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ú–û–ñ–ù–û –∫–∏–¥–∞—Ç—å –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï–õ–¨–ó–Ø! –ò –ù–ê–û–ë–û–†–û–¢!"),
            input_message_content=InputTextMessageContent(_('Inverse üîÅ'))
        )
    )


def add_not_bignumber(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            f"not_bignumber", 
            title=_(f"‚öôÔ∏è–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞—Ä—Ç! (–º–∞–∫—Å–∏–º—É–º 35)"),
            description=(
                f"–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–æ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∂–∏—Ç–µ."),
            input_message_content=InputTextMessageContent(
                _(f'‚öôÔ∏è–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∞—Ä—Ç! (–ú–∞–∫—Å. 35)'))
        )
    )





def add_not_big_settigs(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            f"not_number",
            title=_(f"‚öôÔ∏èBIG settings mode (–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ)"),
            description=(
                f"–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–æ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∂–∏—Ç–µ."),
            input_message_content=InputTextMessageContent(
                _(f'‚öôÔ∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç!'))
        )
    )




def add_mode_big_settigs(results, nun):
    """Change mode to classic"""
    text_nun = f"–ö–æ–ª-–≤–æ –∫–∞—Ä—Ç: {nun}"
    results.append(
        InlineQueryResultArticle(
            f"mode_big-sets_{nun}",
            title=_(f"‚öôÔ∏èBIG settings mode ({text_nun})"),
            description=(
                f"–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–æ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∂–∏—Ç–µ."),
            input_message_content=InputTextMessageContent(
                _(f'–í –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–º –º–∏—Ä–µ‚öôÔ∏è({text_nun})'))
        )
    )

def add_mode_bigtext_settigs(results, nun):
    """Change mode to classic"""
    text_nun = f"–ö–æ–ª-–≤–æ –∫–∞—Ä—Ç: {nun}"
    results.append(
        InlineQueryResultArticle(
            f"mode_big-sets-text_{nun}",
            title=_(f"‚öôÔ∏è‚úçÔ∏èBIG settings mode ({text_nun})"),
            description=(
                f"–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –≤ –Ω–∞—á–∞–ª–µ —É –≤–∞—Å –±—É–¥–µ—Ç —Ç–æ –∫–æ–ª-–≤–æ –∫–∞—Ä—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∂–∏—Ç–µ."),
            input_message_content=InputTextMessageContent(
                _(f'–í –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –º–∏—Ä–µ‚öôÔ∏è‚úçÔ∏è({text_nun})'))
        )
    )

def add_mode_random_settigs(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            f"mode_random",
            title=_(f"ü™êRandom mode"),
            description=(
                f"–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –ø—Ä–∏ –∫–∞–∂–æ–º —Ö–æ–¥–µ —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å—Å—è –∫–∞—Ä—Ç—ã"),
            input_message_content=InputTextMessageContent(
                _(f'–í —Ä–∞–Ω–¥–æ–º–Ω–æ–º –º–∏—Ä–µü™ê'))
        )
    )

def add_mode_random_text_settigs(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            f"mode_random-text",
            title=_(f"ü™ê‚úçÔ∏èRandom text mode"),
            description=(
                f"–û–±—ã—á–Ω–æ–µ UNO, –Ω–æ –ø—Ä–∏ –∫–∞–∂–æ–º —Ö–æ–¥–µ —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å—Å—è –∫–∞—Ä—Ç—ã"),
            input_message_content=InputTextMessageContent(
                _(f'–í —Ä–∞–Ω–¥–æ–º–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º –º–∏—Ä–µü™ê‚úçÔ∏è'))
        )
    )




def add_all_modes(results):
    """All modes"""
    add_mode_classic(results)
    add_mode_text(results)

    add_mode_fast(results)

    add_mode_wild(results)
    add_mode_text_wild(results)

    add_mode_super_wild(results)
    add_mode_super_wild_text(results)

    add_mode_inverse(results)
    add_mode_inverse_text(results)

    add_mode_num(results)
    add_mode_num_text(results)

    add_mode_big(results)
    add_mode_big_text(results)

    add_mode_big_wild(results)
    add_mode_big_wild_text(results)
    
    add_mode_random_settigs(results)
    add_mode_random_text_settigs(results)

def add_text_modes(results):
    """Text modes"""
    add_mode_text(results)
    add_mode_text_wild(results)
    add_mode_super_wild_text(results)
    add_mode_inverse_text(results)
    add_mode_num_text(results)
    add_mode_big_text(results)
    add_mode_big_wild_text(results)
    add_mode_random_text_settigs(results)

def add_none_text_modes(results):
    """None text modes"""
    add_mode_classic(results)
    add_mode_fast(results)
    add_mode_wild(results)
    add_mode_super_wild(results)
    add_mode_inverse(results)
    add_mode_num(results)
    add_mode_big(results)
    add_mode_big_wild(results)
    add_mode_random_settigs(results)


def add_draw(player, results):
    """Add option to draw"""
    n = player.game.draw_counter or 1

    results.append(
        Sticker(
            "draw", sticker_file_id=c.STICKERS['option_draw'],
            input_message_content=InputTextMessageContent(__('–í–∑—è–ª(–∞) {number} –∫–∞—Ä—Ç—É',
                                                             '–í–∑—è–ª(–∞) {number} –∫–∞—Ä—Ç(—ã)', n,
                                                             multi=player.game.translate)
                                                          .format(number=n))
        )
    )


def add_gameinfo(game, results):
    """Add option to show game info"""

    results.append(
        Sticker(
            "gameinfo",
            sticker_file_id=c.STICKERS['option_info'],
            input_message_content=game_info(game)
        )
    )


def add_pass(results, game):
    """Add option to pass"""
    results.append(
        Sticker(
            "pass", sticker_file_id=c.STICKERS['option_pass'],
            input_message_content=InputTextMessageContent(
                __('–ü—Ä–æ–ø—É—Å–∫–∞—é', multi=game.translate)
            )
        )
    )


def add_call_bluff(results, game):
    """Add option to call a bluff"""
    results.append(
        Sticker(
            "call_bluff",
            sticker_file_id=c.STICKERS['option_bluff'],
            input_message_content=InputTextMessageContent(__("–Ø –¥—É–º–∞—é, —ç—Ç–æ –±–ª–µ—Ñ!",
                                                             multi=game.translate))
        )
    )


def add_card(game, card, results, can_play):
    """Add an option that represents a card"""

    if game.color_mode == "white":
        if can_play:
            if str(game.mode).lower().find('text') == -1:
                results.append(
                    Sticker(str(card), sticker_file_id=c.STICKERS[str(card)])
                )
            if str(game.mode).lower().find('text') != -1:
                results.append(
                    Sticker(str(card), sticker_file_id=c.STICKERS[str(card)], input_message_content=InputTextMessageContent("–ö–∏–Ω—É–ª –∫–∞—Ä—Ç—É: {card}".format(card=repr(card).replace('–ë–µ—Ä—É +4', '+4').replace('–ë–µ—Ä—É +2', '+2').replace('–ú–µ–Ω—è—é —Ü–≤–µ—Ç', 'Color selection')))
                            ))
        else:
            results.append(
                Sticker(f"game_info_{uuid4()}", sticker_file_id=c.STICKERS_GREY[str(card)],
                        input_message_content=game_info(game))
            )
    elif game.color_mode == "black":
        if can_play:
            if str(game.mode).lower().find('text') == -1:
                results.append(
                    Sticker(str(card), sticker_file_id=cb.STICKERS[str(card)])
                )
            if str(game.mode).lower().find('text') != -1:
                results.append(
                    Sticker(str(card), sticker_file_id=cb.STICKERS[str(card)], input_message_content=InputTextMessageContent("–ö–∏–Ω—É–ª –∫–∞—Ä—Ç—É: {card}".format(card=repr(card).replace('–ë–µ—Ä—É +4', '+4').replace('–ë–µ—Ä—É +2', '+2').replace('–ú–µ–Ω—è—é —Ü–≤–µ—Ç', 'Color selection')))
                            ))
        else:
            results.append(
                Sticker(f"game_info_{uuid4()}", sticker_file_id=cb.STICKERS_GREY[str(card)],
                        input_message_content=game_info(game))
            )
    elif game.color_mode == "flip":
        if game.flip_color == "white":
            if can_play:
                if str(game.mode).lower().find('text') == -1:
                    results.append(
                        Sticker(
                            str(card), sticker_file_id=c.STICKERS[str(card)])
                    )
                if str(game.mode).lower().find('text') != -1:
                    results.append(
                        Sticker(str(card), sticker_file_id=c.STICKERS[str(card)], input_message_content=InputTextMessageContent("–ö–∏–Ω—É–ª –∫–∞—Ä—Ç—É: {card}".format(card=repr(card).replace('–ë–µ—Ä—É +4', '+4').replace('–ë–µ—Ä—É +2', '+2').replace('–ú–µ–Ω—è—é —Ü–≤–µ—Ç', 'Color selection')))
                                ))
            else:
                results.append(
                    Sticker(f"game_info_{uuid4()}", sticker_file_id=c.STICKERS_GREY[str(card)],
                            input_message_content=game_info(game))
                )
        elif game.flip_color == "black":
            if can_play:
                if str(game.mode).lower().find('text') == -1:
                    results.append(
                        Sticker(
                            str(card), sticker_file_id=cb.STICKERS[str(card)])
                    )
                if str(game.mode).lower().find('text') != -1:
                    results.append(
                        Sticker(str(card), sticker_file_id=cb.STICKERS[str(card)], input_message_content=InputTextMessageContent("–ö–∏–Ω—É–ª –∫–∞—Ä—Ç—É: {card}".format(card=repr(card).replace('–ë–µ—Ä—É +4', '+4').replace('–ë–µ—Ä—É +2', '+2').replace('–ú–µ–Ω—è—é —Ü–≤–µ—Ç', 'Color selection')))
                                ))
            else:
                results.append(
                    Sticker(f"game_info_{uuid4()}", sticker_file_id=cb.STICKERS_GREY[str(card)],
                            input_message_content=game_info(game))
                )


def game_info_text(game):
    players = player_list(game)
    return (
        _("–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: {name}")
        .format(name=display_name(game.current_player.user)) +
        "\n" +
        _("–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞: {card}").format(card=repr(game.last_card)) +
        "\n" +
        _("–ò–≥—Ä–æ–∫: {player_list}",
          "–ò–≥—Ä–æ–∫–∏:\n‚Ä¢ {player_list}",
          len(players))
        .format(player_list="\n‚Ä¢ ".join(players))
    )


def game_info(game):
    return InputTextMessageContent(game_info_text(game))


def add_color_replace(results):
    add_color_white(results)
    add_color_black(results)
    add_color_flip(results)


def add_color_black(results):
    results.append(
        InlineQueryResultArticle(
            "colormode_black",
            title=_("üñ§ –ß–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã"),
            description=("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç –Ω–∞ —á—ë—Ä–Ω—ã–π"),
            input_message_content=InputTextMessageContent(_('üñ§ –ß–µ—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã'))
        )
    )


def add_color_white(results):
    results.append(
        InlineQueryResultArticle(
            "colormode_white",
            title=_("ü§ç –ë–µ–ª—ã–µ –∫–∞—Ä—Ç—ã"),
            description=("–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç –Ω–∞ –±–µ–ª—ã–π"),
            input_message_content=InputTextMessageContent(_('ü§ç –ë–µ–ª—ã–µ –∫–∞—Ä—Ç—ã'))
        )
    )


def add_color_flip(results):
    """Change mode to classic"""
    results.append(
        InlineQueryResultArticle(
            "colormode_flip",
            title=_("üîÄ Flip –∫–∞—Ä—Ç—ã"),
            description=("–í —ç—Ç–æ –∫–æ–ª–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Ä—Ç—ã —É–Ω–æ FLIP!"),
            input_message_content=InputTextMessageContent(_("Flip üîÄ"))
        )
    )
